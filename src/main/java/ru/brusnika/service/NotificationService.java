package ru.brusnika.service;

import ru.brusnika.model.User;
import ru.brusnika.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.File;
import java.time.LocalDate;
import java.util.List;

@Service
public class NotificationService {

    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    private final UserRepository userRepository;
    private final TelegramBotService telegramBotService;
    private final DocumentService documentService;
    private final int NOTIFICATION_DAYS_BEFORE = 21;

    public NotificationService(UserRepository userRepository, TelegramBotService telegramBotService,
                               DocumentService documentService) {
        this.userRepository = userRepository;
        this.telegramBotService = telegramBotService;
        this.documentService = documentService;
    }

    @Scheduled(cron = "0 15 10 * * ?") // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
    public void checkUpcomingVacations() {
        logger.info("=== –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–°–¢–û–Ø–©–ò–• –û–¢–ü–£–°–ö–û–í ===");

        List<User> users = userRepository.findUsersWithUpcomingVacations(NOTIFICATION_DAYS_BEFORE);
        logger.info("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", users.size());

        for (User user : users) {
            sendVacationReminder(user);
        }
    }

    private void sendVacationReminder(User user) {
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", user.getFullName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 5 –æ—Ç–ø—É—Å–∫–æ–≤
        checkAndSendForVacation(user, user.getVacation1(), user.getVacation1Days(),
                user.getVacation1Notified(), 1);
        checkAndSendForVacation(user, user.getVacation2(), user.getVacation2Days(),
                user.getVacation2Notified(), 2);
        checkAndSendForVacation(user, user.getVacation3(), user.getVacation3Days(),
                user.getVacation3Notified(), 3);
        checkAndSendForVacation(user, user.getVacation4(), user.getVacation4Days(),
                user.getVacation4Notified(), 4);
        checkAndSendForVacation(user, user.getVacation5(), user.getVacation5Days(),
                user.getVacation5Notified(), 5);
    }

    private void checkAndSendForVacation(User user, LocalDate vacationDate, Integer vacationDays,
                                         Boolean notified, int vacationNumber) {
        if (shouldSendNotification(vacationDate, vacationDays, notified)) {
            sendDocumentNotification(user, vacationDate, vacationDays, vacationNumber);
        }
    }

    private boolean shouldSendNotification(LocalDate vacationDate, Integer vacationDays, Boolean notified) {
        if (vacationDate == null || vacationDays == null) {
            return false;
        }
        if (notified != null && notified) {
            return false;
        }

        LocalDate targetDate = LocalDate.now().plusDays(NOTIFICATION_DAYS_BEFORE);
        return vacationDate.equals(targetDate);
    }

    private void sendDocumentNotification(User user, LocalDate vacationDate, Integer vacationDays,
                                          int vacationNumber) {
        try {
            File documentFile = documentService.generateVacationNotice(
                    user, vacationDate, vacationDays, vacationNumber, NOTIFICATION_DAYS_BEFORE);

            String textMessage = String.format(
                    "–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) %s! –î–æ –≤–∞—à–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª—Å—è %d –¥–µ–Ω—å. " +
                            "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üìÑ",
                    user.getFirstNameAndPatronymic() != null ?
                            user.getFirstNameAndPatronymic() : user.getFullName(),
                    NOTIFICATION_DAYS_BEFORE
            );

            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            telegramBotService.sendMessage(user.getTelegramId(), textMessage);

            // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç
            telegramBotService.sendDocument(user.getTelegramId(), documentFile);

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            userRepository.markNotificationSent(user.getTelegramId(), vacationNumber);

            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} (–æ—Ç–ø—É—Å–∫ #{})",
                    user.getTelegramId(), vacationNumber);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            documentFile.delete();

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}",
                    user.getTelegramId(), e.getMessage(), e);
        }
    }
}