package ru.brusnika.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.brusnika.config.BotConfig;

import java.io.File;

@Component
public class TelegramBotService extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramBotService.class);
    private final BotConfig botConfig;

    public TelegramBotService(BotConfig botConfig) {
        super(botConfig.getToken());
        this.botConfig = botConfig;
        logger.info("TelegramBotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ—Ç–∞: {}", botConfig.getUsername());
    }

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            Long userId = update.getMessage().getFrom().getId();

            logger.debug("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (ID: {}): {}",
                    update.getMessage().getFrom().getFirstName(), userId, messageText);

            switch (messageText) {
                case "/start":
                    sendMessage(chatId,
                            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–ø—É—Å–∫–∞—Ö.\n\n" +
                                    "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                                    "/myid - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID\n" +
                                    "/test - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ 21 –¥–µ–Ω—å –¥–æ –æ—Ç–ø—É—Å–∫–∞.");
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", userId);
                    break;

                case "/myid":
                    String userInfo = String.format(
                            "üë§ –í–∞—à ID –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %d\n\n" +
                                    "üìû –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                            userId
                    );
                    sendMessage(chatId, userInfo);
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π ID", userId);
                    break;

                case "/test":
                    sendMessage(chatId, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.");
                    logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {}", userId);
                    break;

                case "/–ü—Ä–∏–≤–µ—Ç":
                case "/–ø—Ä–∏–≤–µ—Ç":
                case "/hello":
                case "/Hello":
                    String greeting = String.format(
                            "üëã –ü—Ä–∏–≤–µ—Ç, %s!üòä \n\n" +
                                    "–°—Ö–æ–¥–∏ –Ω–∞–ª–µ–π –ø–æ–∫–∞-—á—Ç–æ —Å–µ–±–µ –∫–æ—Ñ–µ, –∞ —è –ø—Ä–æ–±–µ–≥—É—Å—å –ø–æ—Å–º–æ—Ç—Ä—é –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ø—É—Å–∫! \uD83C\uDFDD \n",
                            update.getMessage().getFrom().getFirstName()
                    );
                    sendMessage(chatId, greeting);
                    logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {} (ID: {})",
                            update.getMessage().getFrom().getFirstName(), userId);
                    break;

                default:
                    logger.debug("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", messageText, userId);
                    break;
            }
        }
    }

    public void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, e.getMessage());
        }
    }

    public void sendDocument(Long chatId, File document) {
        SendDocument sendDocument = new SendDocument();
        sendDocument.setChatId(chatId.toString());
        sendDocument.setDocument(new InputFile(document));
        sendDocument.setCaption("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—É—Å–∫–µ!\n" +
                "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
                "1. –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n" +
                "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–∞–Ω –°–æ–ª–æ–¥–æ–≤–æ–π –ï.–°.(@solodovakat), –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –æ—Ñ–∏—Å!\n" +
                "3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –≤ –ö–≠–î–û");

        try {
            execute(sendDocument);
            logger.info("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, e.getMessage());
        }
    }
}